# set shared team Google drive and code repo dynamically
if (Sys.info()[2]=='10 x64'){
g_drive  <- 'G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- 'C:/Users/frc2/Documents/uw-phi-vax/'
} else if (Sys.info()[2]=='Server x64'){
g_drive  <- 'G:/Shared with Me/Merck Vaccine Improvement Index Project/'
code_dir <- 'H:/uw-phi-vax/'
} else {
g_drive  <- '/Volumes/GoogleDrive/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- '~/Documents/uw-phi-vax/'
}
# Author: Francisco Rios
# Purpose: Set up R for prepping UW PHI Vaccination Data
# Date: Last modified September 20, 2021
# Load required packages -----
library(data.table)
library(ggplot2)
library(readxl)
library(tidyverse)
# Define important variables -----
# set shared team Google drive and code repo dynamically
if (Sys.info()[2]=='10 x64'){
g_drive  <- 'G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- 'C:/Users/frc2/Documents/uw-phi-vax/'
} else if (Sys.info()[2]=='Server x64'){
g_drive  <- 'G:/Shared with Me/Merck Vaccine Improvement Index Project/'
code_dir <- 'H:/uw-phi-vax/'
} else {
g_drive  <- '/Volumes/GoogleDrive/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- '~/Documents/uw-phi-vax/'
}
setwd(code_dir) # set the working directory to wherever code is stored
raw_data_dir <- paste0(g_drive,"Data/raw_data/") # location of raw data
prepped_data_dir <- paste0(g_drive,"Data/prepped_data/") # location of prepped data
codebook_directory <- paste0(g_drive,"Data/documentation/codebooks/") # location of codebooks for interpreting data
resDir <- paste0(g_drive, "Results/") # location of  any result outputs
visDir <- paste0(g_drive,"Visualizations/") # location where visualizations are saved
# set up for analyses
# might be necessary to do this first
# Load useful packages
library(mice)
library(VIM)
library(car)
library(psych)
library(moments)
# Make sure all variables have a complete time series -----
# Load prepped and merged data
dt <- read_rds(paste0(prepped_data_dir, "aim_2/12_merged_dataset.RDS"))
# subset data to specific time frame
dt <- dt %>% filter(year < 2020 & year > 1990)
# ensure all variables have a complete time series
imputed_Data <- mice(dt, m=5, maxit = 50, method = 'pmm', seed = 500)
# save imputed data set in prepped data folder
saveRDS(imputed_Data, file=paste0(prepped_data_dir, "aim_2/imputed_data_list.RDS"))
# get first completed dataset to observe trends
completeDT <- complete(imputed_Data, 1)
# save copy of untransformed first completed data set
untransformed <- copy(completeDT)
untransformed <- as.data.table(untransformed)
# First kind of transformation: log transformation -----
# create dt1 to save first transformation
dt1 <- as.data.table(completeDT)
names(dt1)
# Reshape untransformed data for plotting
plot_untr_dt <- melt(untransformed, id.vars = idVars, variable.name = 'variable')
# Reshape each transformed data for plotting
idVars <- unique(codeTable$Variable)[1:5]
# save imputed data set in prepped data folder
saveRDS(imputed_Data, file=paste0(prepped_data_dir, "aim_2/imputed_data_list.RDS"))
# get first completed dataset to observe trends
completeDT <- complete(imputed_Data, 1)
# save copy of untransformed first completed data set
untransformed <- copy(completeDT)
untransformed <- as.data.table(untransformed)
# Test transformation 1: natural log transformation -----
dt1 <- as.data.table(completeDT)
dt1[,c(6:19)] <- log(dt1[, c(6:19)])
# Test transformation 2: multiply by 1000 then log transformation -----
dt2 <- as.data.table(completeDT)
dt2[,c(6:19)] <- log(1000*dt2[, c(6:19)])
# Test transformation 3: sqrt transformation -----
dt3 <- as.data.table(completeDT)
dt3[,c(6:19)] <- sqrt(dt3[, c(6:19)])
# Test transformation 4: squared transformation -----
dt4 <- as.data.table(completeDT)
dt4[,c(6:19)] <- (dt3[,c(6:19)]^2)
# Fourth transformation: cumulative, log, logit and lag. ----
# pending
# Load "codeTable" for easy labeling
codeTable <- as.data.table(read_xlsx(path=paste0(codebook_directory, "vaccine_index_variable_codebook.xlsx")))
labelTable <- unique(codeTable[,.(Variable, Label)])
# Reshape each transformed data for plotting
idVars <- unique(codeTable$Variable)[1:5]
plotdt1 <- melt(dt1, id.vars = idVars, variable.name = 'variable')
plotdt2 <- melt(dt2, id.vars = idVars, variable.name = 'variable')
plotdt3 <- melt(dt3, id.vars = idVars, variable.name = 'variable')
plotdt4 <- melt(dt4, id.vars = idVars, variable.name = 'variable')
indexVars <- unique(df1$variable)
# Transformed data used to create index
histograms1 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt1[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
natural log.') +
theme_minimal()
})
histograms2 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt2[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
values multiplied by 1000, and natural log.') +
theme_minimal()
})
histograms3 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt3[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
square root.') +
theme_minimal()
})
histograms4 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt4[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
squared.') +
theme_minimal()
})
# Reshape untransformed data for plotting
plot_untr_dt <- melt(untransformed, id.vars = idVars, variable.name = 'variable')
# Untransformed data
histograms_untr = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plot_untr_dt[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histograms of untransformed', l), y = 'value', x =l,
caption='Variables are pre-transformation.')+
theme_minimal()
})
# Reshape each transformed data for plotting
idVars <- unique(codeTable$Variable)[1:5]
indexVars <- unique(plotdt1$variable)
indexVars
# Transformed data used to create index
histograms1 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt1[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
natural log.') +
theme_minimal()
})
histograms2 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt2[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
values multiplied by 1000, and natural log.') +
theme_minimal()
})
histograms3 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt3[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
square root.') +
theme_minimal()
})
histograms4 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt4[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
squared.') +
theme_minimal()
})
# Reshape untransformed data for plotting
plot_untr_dt <- melt(untransformed, id.vars = idVars, variable.name = 'variable')
# Untransformed data
histograms_untr = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plot_untr_dt[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histograms of untransformed', l), y = 'value', x =l,
caption='Variables are pre-transformation.')+
theme_minimal()
})
# print(paste('Saving:', outputFile4c)C)
outputFile15 <- paste0(visDir, "aim_2/transformed_data_exploration.pdf")
pdf(outputFile15, height=5.5, width=9)
for(i in seq(length(histograms))) {
print(histograms_untr[[i]])
print(histograms1[[i]])
print(histograms2[[i]])
print(histograms3[[i]])
print(histograms4[[i]])
}
for(i in seq(length(histograms_untr))) {
print(histograms_untr[[i]])
print(histograms1[[i]])
print(histograms2[[i]])
print(histograms3[[i]])
print(histograms4[[i]])
}
dev.off()
unique(plot_untr_dt$variable)
for (id in unique(plot_untr_dt$variable)){
sub_Data <- plot_untr_dt[which(plot_untr_dt$variable == id), ]$value
pdf(paste0(visDir, "aim_2/qq_", id, ".pdf"))
qqnorm(sub_Data, main=paste("Variable =", id))
qqline(sub_Data, col="red", lty =2, lwd = 3)
dev.off()
}
qqplot_untr = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
sub_Data <- plot_untr_dt[which(plot_untr_dt$variable == v), ]$value
qqnorm(sub_Data, main=paste("Variable =", v))
qqline(sub_Data, col="red", lty = 2, lwd = 3)
})
qqplot_untr[1]
qqplot_untr[[1]]
histograms_untr = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plot_untr_dt[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histograms of untransformed', l), y = 'value', x =l,
caption='Variables are pre-transformation.')+
theme_minimal()
})
qqplot_untr = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
sub_Data <- plot_untr_dt[which(plot_untr_dt$variable == v), ]$value
qqnorm(sub_Data, main=paste("Variable =", v))
qqline(sub_Data, col="red", lty = 2, lwd = 3)
})
View(qqplot_untr)
indexVars
plot_untr_dt[which(plot_untr_dt$variable==nch_cnv_dah_20)]
names(plot_untr_dt)
skewness(dt1$imm_pop_perc)
skewness(untransformed$imm_pop_perc)
