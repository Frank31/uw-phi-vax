data_tableau[ grant_period == '2021-2023', cycle := 'NFM3']
data_tableau[ budget_version == 'approved', version := 'approved_budget']
data_tableau[ budget_version == 'funding_request20', version := 'funding_request']
data_tableau[ budget_version == 'funding_request20_CT', version := 'funding_request_CT']
# # get rid of extra version variable
data_tableau[,budget_version:=NULL]
setnames(data_tableau, 'budget', 'correct_budget')
setnames(data_tableau, 'gf_module', 'module')
setnames(data_tableau, 'gf_intervention', 'intervention')
# setnames(data_tableau, 'budget_version', 'version')
# data_tableau_module = data_tableau[, .(correct_budget=sum(correct_budget, na.rm=TRUE)), by = .(loc_name, module, version, cycle )]
# data_tableau_intervention = data_tableau[, .(correct_budget=sum(correct_budget, na.rm=TRUE)), by = .(loc_name, module, intervention, version, cycle )]
# x = merge(data_tableau_module, check_2s_coded_module, all = TRUE, by = c('loc_name', 'module', 'version', 'cycle'))
# x[, discrepancy := round(correct_budget) - round(budget_2s)]
# x[discrepancy > 5 | discrepancy < -5, check := 'flag']
#
# y = merge(data_tableau_intervention, check_2s_coded_intervention, all = TRUE, by = c('loc_name', 'module', 'intervention', 'version', 'cycle'))
# y[, discrepancy := round(correct_budget) - round(budget_2s)]
# y[discrepancy > 5 | discrepancy < -5, check := 'flag']
# removing whitespace from beginning and end of all merging variables just in case
cols_trim <- c("activity_description","module","intervention")
check_2s_coded[,(cols_trim) :=lapply(.SD,trimws),.SDcols = cols_trim]
data_tableau[,(cols_trim) := lapply(.SD, trimws),.SDcols = cols_trim]
# check_2s_coded[, activity_description := trimws(activity_description)]
# check_2s_coded[, activity_description := gsub('  ', ' ', activity_description)]
check_2s_coded[, activity_description := gsub('\\s+', ' ', activity_description)]
# check_2s_coded[, module := gsub('  ', ' ', module)]
# check_2s_coded[, intervention := gsub('  ', ' ', intervention)]
# data_tableau[, activity_description := trimws(activity_description)]
# data_tableau[, activity_description :=  gsub('  ', ' ', activity_description)]
# data_tableau[, activity_description :=  gsub('   ', ' ', activity_description)]
data_tableau[, activity_description := gsub('\\s+', ' ', activity_description)]
# data_tableau[, module :=  gsub('  ', ' ', activity_description)]
# data_tableau[, intervention :=  gsub('  ', ' ', activity_description)]
rm(list=ls())
rm(list=ls())
#########################################################
# Audrey Batzel
# troubleshoot discrepancies in the 2S figures for DRC
# clear
rm(list=ls())
# Set up
library(ggplot2)
library(data.table)
library(readxl)
library(scales)
library(grid)
library(lattice)
library(RColorBrewer)
library(stringr)
# -------------------------------------------------------------------
# Files and directories
setwd('C:/local/gf/')
user=as.character(Sys.info()[7])
# input file
box = paste0("C:/Users/", user, "/Box Sync/Global Fund Files/")
inFile = paste0(box, 'tableau_data/budgetRevisions_with_frBudgets_activityLevel.csv')
inFile_2s_coded = paste0(box, '2s_data/prepped_2s_data_all_countries.csv')
# -------------------------------------------------------------------
# -------------------------------------------------------------------
# read in and sum to appropriate levels
# -------------------------------------------------------------------
data_2s = as.data.table(read.csv(paste0(box, '2s_data/prepped_2s_data_all_countries.csv')))
setnames(data_2s, 'budget', 'budget_2s')
data_2s[loc_name == 'UGA', loc_name := 'Uganda']
data_2s[loc_name == 'SEN', loc_name := 'Senegal']
data_2s[loc_name == 'GTM', loc_name := 'Guatemala']
check_2s_coded = data_2s[,.(budget_2s = sum(budget_2s, na.rm = TRUE)), by = .(loc_name, module, intervention, activity_description, version, cycle, grant_period)]
# check_2s_coded_intervention = data_2s[,.(budget_2s = sum(budget_2s, na.rm = TRUE)), by = .(loc_name, module, intervention, version, cycle, grant_period)]
# check_2s_coded_module = data_2s[,.(budget_2s = sum(budget_2s, na.rm = TRUE)), by = .(loc_name, module, version, cycle, grant_period)]
data = as.data.table(read.csv(inFile))
# keep only funding request and approved versions (not keeping versions submitted to CT as they were not)
data_tableau = data[rssh==TRUE & budget_version %in% c('funding_request20', 'funding_request20_CT', 'approved'), .(budget=sum(budget, na.rm=TRUE)), by = .(loc_name, gf_module, gf_intervention, activity_description, grant_period, budget_version )]
# data_tableau = data[rssh==TRUE & budget_version %in% c('funding_request20', 'approved'), .(budget=sum(budget, na.rm=TRUE)), by = .(loc_name, gf_module, gf_intervention, activity_description, grant_period, budget_version )]
data_tableau[ grant_period %in% c('2018-2020', '2019-2021', '2019-2022'), cycle := 'NFM2']
data_tableau[ grant_period == '2021-2023', cycle := 'NFM3']
data_tableau[ budget_version == 'approved', version := 'approved_budget']
data_tableau[ budget_version == 'funding_request20', version := 'funding_request']
data_tableau[ budget_version == 'funding_request20_CT', version := 'funding_request_CT']
# # get rid of extra version variable
# data_tableau[,budget_version:=NULL]
setnames(data_tableau, 'budget', 'correct_budget')
setnames(data_tableau, 'gf_module', 'module')
setnames(data_tableau, 'gf_intervention', 'intervention')
# setnames(data_tableau, 'budget_version', 'version')
# data_tableau_module = data_tableau[, .(correct_budget=sum(correct_budget, na.rm=TRUE)), by = .(loc_name, module, version, cycle )]
# data_tableau_intervention = data_tableau[, .(correct_budget=sum(correct_budget, na.rm=TRUE)), by = .(loc_name, module, intervention, version, cycle )]
# x = merge(data_tableau_module, check_2s_coded_module, all = TRUE, by = c('loc_name', 'module', 'version', 'cycle'))
# x[, discrepancy := round(correct_budget) - round(budget_2s)]
# x[discrepancy > 5 | discrepancy < -5, check := 'flag']
#
# y = merge(data_tableau_intervention, check_2s_coded_intervention, all = TRUE, by = c('loc_name', 'module', 'intervention', 'version', 'cycle'))
# y[, discrepancy := round(correct_budget) - round(budget_2s)]
# y[discrepancy > 5 | discrepancy < -5, check := 'flag']
# removing whitespace from beginning and end of all merging variables just in case
cols_trim <- c("activity_description","module","intervention")
check_2s_coded[,(cols_trim) :=lapply(.SD,trimws),.SDcols = cols_trim]
data_tableau[,(cols_trim) := lapply(.SD, trimws),.SDcols = cols_trim]
# this should trim any spaces greater than 2
check_2s_coded[, activity_description := gsub('\\s+', ' ', activity_description)]
data_tableau[, activity_description := gsub('\\s+', ' ', activity_description)]
# merge together
z = merge(check_2s_coded, data_tableau, all = TRUE, by = c('loc_name', 'module', 'intervention', 'activity_description', 'version', 'cycle', 'grant_period'))
View(z)
View(z)
# z = z[intervention == 'Surveys']
# z = z[, -c('grant_period.x', 'grant_period.y')]
z[, discrepancy := round(correct_budget) - round(budget_2s)]
z[discrepancy > 5 | discrepancy < -5, check := 'flag']
View(z)
View(z)
updateR
updateR()
??updateR
library(installr)
# set up script
library(datatable)
?Datatable
??DAtatable
install.packages("data.table")
install.packages(Rtools)
install.packages('Rtools')
library(data.table)
# set up script
library(datatable)
# set up script
library(data.table)
install.packages("ggplot2")
###############################
# important variables
###############################
data_dir <- "G:\.shortcut-targets-by-id\1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO\Merck Vaccine Improvement Index Project\Data"
###############################
# important variables
###############################
data_dir <- "G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/Data"
data_dir
###############################
# important variables
###############################
shared_data_dir <- "G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/Data"
library(readxl)
# Author: Francisco Rios
# Purpose: Set up R for prepping UW PHI Vaccination Data
# Date: Last modified July 12, 2021
###############################
# load required packages
###############################
library(data.table)
library(ggplot2)
library(readxl)
###############################
# important variables
###############################
shared_data_dir <- "G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/Data"
local_data_dir <- "G:/My Drive/PHI/local_data"
code_dir <- "./"
###############################
# source shared functions
###############################
source(paste0(code_dir, "functions/", "prep_vax_trend_data.R"))
###############################
# set Boolean switches
##############################
rm(list=ls())
# Author: Francisco Rios
# Purpose: Set up R for prepping UW PHI Vaccination Data
# Date: Last modified July 12, 2021
###############################
# load required packages
###############################
library(data.table)
library(ggplot2)
library(readxl)
###############################
# important variables
###############################
shared_data_dir <- "G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/Data"
local_data_dir <- "G:/My Drive/PHI/local_data"
code_dir <- "./"
paste0(code_dir, "functions/", "prep_vax_trend_data.R")
###############################
# source shared functions
###############################
source(paste0(code_dir, "functions/", "prep_vax_trend_data.R"))
root
pwd
setwd("~/uw-phi-vax")
###############################
library(data.table)
library(ggplot2)
library(readxl)
###############################
# important variables
###############################
shared_data_dir <- "G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/Data"
local_data_dir <- "G:/My Drive/PHI/local_data"
code_dir <- "./"
###############################
# source shared functions
###############################
source(paste0(code_dir, "functions/", "prep_vax_trend_data.R"))
??read_xlsx()
# read in SDI data
sdi.dat <- as.data.table(read_xlsx(path=paste0(local_data_dir, "/sdi/IHME_GBD_2019_SDI_1990_2019_Y2020M10D15.xlsx")))
View(sdi.dat)
codebook_directory <- paste0(local_data_dir,"/codebooks")
# read in codebook
sdi.codebook <- as.data.table(read_xls(path = paste0(codebook_directory, "/IHME_GBD_2019_GBD_LOCATION_HIERARCHY_Y2020M10D15.xlsx")))
# read in codebook
sdi.codebook <- as.data.table(read_xlsx(path = paste0(codebook_directory, "/IHME_GBD_2019_GBD_LOCATION_HIERARCHY_Y2020M10D15.xlsx")))
View(sdi.codebook)
View(sdi.dat)
sdi.dat[2]
sdi.dat[1]
# clean rows of SDI data
names_sdi <- sdi.dat[1]
names_sdi
names(sdi.data) <- names_sdi
names(sdi.dat) <- names_sdi
str(names_sdi)
# re-name variable names
names_sdi <- as.character(sdi.dat[1])
names(sdi.dat) <- names_sdi
View(sdi.dat)
# remove extra name row from the field
sdi.dat <- sdi.dat[-c(1,)]
# remove extra name row from the field
sdi.dat <- sdi.dat[-c(1),]
View(sdi.dat)
View(sdi.codebook)
View(sdi.dat)
# merge codebook with the SDI data-sheet
sdi.test <- merge(sdi.dat, sdi.codebook, by.x = "Location", by.y = "Location Name", all.x = TRUE)
View(sdi.test)
# check to make sure that all locations in codebook are in the data
code_check <- sdi.codebook[Location_name]
# check to make sure that all locations in codebook are in the data
code_check <- sdi.codebook$`Location Name`
View(code_check)
data_check <- sdi.dat$Location
View(data_check)
# check to make sure that all locations in codebook are in the data
code_check <- sdi.codebook[,.(`Location Name`)]
View(code_check)
data_check <- sdi.dat[,.(Location)]
# check to make sure that all locations in codebook are in the data
code_check <- sdi.codebook[,.(`Location Name`)]
data_check <- sdi.dat[,.(Location)]
unmapped_codes <- dt[!code_check%in%data_check]
unmapped_codes <- sdi.dat[!code_check%in%data_check]
View(unampped_codes)
View(unmapped_codes)
# check to make sure that all locations in codebook are in the data
code_check <- paste0(sdi.codebook$`Location Name`)
data_check <- paste0(sdi.dat$Location)
unmapped_codes <- sdi.dat[!code_check%in%data_check]
unmapped_codes <- sdi.dat[!data_check%in%code_check]
View(unmapped_codes)
View(sdi.codebook)
View(unmapped_codes)
if(nrow(unmapped_codes)>0){
print(unique(unmapped_codes[, c("Location"), with= FALSE]))
# print(unique(unmapped_codes$file_name)) #For documentation in the comments above.
stop("You have unmapped original codes!")
}
setcolnames(sdi.dat, old=c("Loation"), new=c("location"))
colnames(sdi.dat, old=c("Loation"), new=c("location"))
colnames(sdi.dat, old=c("Location"), new=c("location"))
setnames(sdi.dat, old=c("Location"), new=c("location"))
head(sdi.codebook)
# rename location name variable
setnames(sdi.codebook, old=c("Location Name"), new=c("location"))
source(paste0(code_dir, "functions/", "strip_chars.R"))
source(paste0(code_dir, "functions/", "strip_chars.R"))
# create merge label name in both codebook and data
strip_chars(sdi.codebook)
View(sdi.codebook)
# create merge label name in both codebook and data
strip_chars(sdi.codebook)
# create merge label name in both codebook and data
strip_chars(sdi.dat)
source(paste0(code_dir, "functions/", "strip_chars.R"))
# create merge label name in both codebook and data
strip_chars(sdi.dat)
source(paste0(code_dir, "functions/", "strip_chars.R"))
# create merge label name in both codebook and data
strip_chars(sdi.dat)
??chartr
dt <- sdi.dat
## vector dictionary of special characters to regular characters
unwanted_array = list('ã'='a', 'é'="e", "Í"="I", "í"="i")
unwanted_array
# vector of characters or phrases to remove
remove_chars <- c(" ", "[\u2018\u2019\u201A\u201B\u2032\u2035]","[\u201C\u201D\u201E\u201F\u2033\u2036]"
, "[[:punct:]]", "[^[:alnum:]]","\"", ",")
remove_chars
#Save an original copy of location name
dt$orig_location <- copy(dt$location)
View(dt)
##remove special characters and blank spaces
dt$location <- tolower(dt$location)
View(dt)
dt$location <- gsub(paste0(remove_chars, collapse = "|", "", dt$location))
paste0(remove_chars, collapse = "|", "", dt$location)
dt$location <- gsub(paste(remove_chars, collapse="|"), "",dt$location)
View(dt$location)
View(dt)
dt$location <- chartr(paste(names(unwanted_array), collapse=''),
paste(unwanted_array, collapse=''),
dt$location)
View(dt)
source(paste0(code_dir, "functions/", "prep_vax_trend_data.R"))
source(paste0(code_dir, "functions/", "strip_chars.R"))
# create merge label name in both codebook and data
strip_chars(sdi.dat)
rm(list=ls())
# Author: Francisco Rios
# Purpose: Set up R for prepping UW PHI Vaccination Data
# Date: Last modified July 12, 2021
# Manually set the working directory
###############################
# load required packages
###############################
library(data.table)
library(ggplot2)
library(readxl)
###############################
# important variables
###############################
shared_data_dir <- "G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/Data"
local_data_dir <- "G:/My Drive/PHI/local_data"
code_dir <- "./"
codebook_directory <- paste0(local_data_dir,"/codebooks")
###############################
# source shared functions
###############################
source(paste0(code_dir, "functions/", "prep_vax_trend_data.R"))
source(paste0(code_dir, "functions/", "strip_chars.R"))
###############################
# set Boolean switches
##############################
# Author: Francisco Rios
# Purpose: Prep socio-demographic data for analyses
# Date: Last modified July 13, 2021
# read in SDI data downloaded from GBD
sdi.dat <- as.data.table(read_xlsx(path = paste0(local_data_dir, "/sdi/IHME_GBD_2019_SDI_1990_2019_Y2020M10D15.xlsx")))
# re-name variable names
names_sdi <- as.character(sdi.dat[1])
names(sdi.dat) <- names_sdi
setnames(sdi.dat, old=c("Location"), new=c("location"))
# remove extra name row from the field
sdi.dat <- sdi.dat[-c(1),]
# read in codebook
sdi.codebook <- as.data.table(read_xlsx(path = paste0(codebook_directory, "/IHME_GBD_2019_GBD_LOCATION_HIERARCHY_Y2020M10D15.xlsx")))
# rename location name variable
setnames(sdi.codebook, old=c("Location Name"), new=c("location"))
# create merge label name in both codebook and data
strip_chars(sdi.dat)
strip_chars(sdi.codebook)
dt <- sdi.dat
## vector dictionary of special characters to regular characters
unwanted_array = list('ã'='a', 'é'="e", "Í"="I", "í"="i")
# vector of characters or phrases to remove
remove_chars <- c(" ", "[\u2018\u2019\u201A\u201B\u2032\u2035]","[\u201C\u201D\u201E\u201F\u2033\u2036]"
, "[[:punct:]]", "[^[:alnum:]]","\"", ",")
#Save an original copy of location name
dt$orig_location <- copy(dt$location)
##remove special characters and blank spaces
dt$location <- tolower(dt$location)
dt$location <- gsub(paste(remove_chars, collapse="|"), "",dt$location)
dt$location <- chartr(paste(names(unwanted_array), collapse=''),
paste(unwanted_array, collapse=''),
dt$location)
return(dt)
View(dt)
# create merge label name in both codebook and data
strip_chars(sdi.dat)
strip_chars(sdi.codebook)
# create merge label name in both codebook and data
strip_chars(sdi.dat)
names(unwanted_array)
unwanted_array
paste(unwanted_array)
unwanted_array = list(    'S'='S', 's'='s', 'Z'='Z', 'z'='z', '?'='A', '?'='A', '?'='A', '?'='A', '?'='A', '?'='A', '?'='A', '?'='C', '?'='E', '?'='E',
'?'='E', '?'='E', '?'='I', '?'='I', '?'='I', '?'='I', '?'='N', '?'='O', '?'='O', '?'='O', '?'='O', '?'='O', '?'='O', '?'='U',
'?'='U', '?'='U', '?'='U', '?'='Y', '?'='B', '?'='Ss', '?'='a', '?'='a', '?'='a', '?'='a', '?'='a', '?'='a', '?'='a', '?'='c',
'?'='e', '?'='e', '?'='e', '?'='e', '?'='i', '?'='i', '?'='i', '?'='i', '?'='o', '?'='n', '?'='o', '?'='o', '?'='o', '?'='o',
'?'='o', '?'='o', '?'='u', '?'='u', '?'='u', '?'='y', '?'='y', '?'='b', '?'='y', 'Ã '='a', 'Ã¡'='a', 'Ã¢'='a', 'Ã£'='a', 'Ã¤'='a', 'Ã¥'='a', 'Ã¦'='a', 'Ã§'='c',
'Ã¨'='e', 'Ã©'='e', 'Ãª'='e', 'Ã«'='e', 'Ã¬'='i', 'Ã­'='i', 'Ã®'='i', 'Ã¯'='i', 'Ã°'='o', 'Ã±'='n', 'Ã²'='o', 'Ã³'='o', 'Ã´'='o', 'Ãµ'='o',
'Ã¶'='o', 'Ã¸'='o', 'Ã¹'='u', 'Ãº'='u', 'Ã»'='u', 'Ã½'='y', 'Ã½'='y', 'Ã¾'='b', 'Ã¿'='y')
names(unwanted_array)
paste(unwanted_array)
## vector dictionary of special characters to regular characters
unwanted_array = list('ã'='a', 'é'="e", "Í"="I", "í"="i")
names(unwanted_array)
paste(unwanted_array)
source(paste0(code_dir, "functions/", "strip_chars.R"))
strip_chars()
View(prep_vax_trend_data)
View(strip_chars)
rm(list=ls())
# Author: Francisco Rios
# Purpose: Set up R for prepping UW PHI Vaccination Data
# Date: Last modified July 12, 2021
# Manually set the working directory
###############################
# load required packages
###############################
library(data.table)
library(ggplot2)
library(readxl)
###############################
# important variables
###############################
shared_data_dir <- "G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/Data"
local_data_dir <- "G:/My Drive/PHI/local_data"
code_dir <- "./"
codebook_directory <- paste0(local_data_dir,"/codebooks")
###############################
# source shared functions
###############################
source(paste0(code_dir, "functions/", "prep_vax_trend_data.R"))
source(paste0(code_dir, "functions/", "strip_chars.R"))
###############################
# set Boolean switches
##############################
# Author: Francisco Rios
# Purpose: Prep socio-demographic data for analyses
# Date: Last modified July 13, 2021
# read in SDI data downloaded from GBD
sdi.dat <- as.data.table(read_xlsx(path = paste0(local_data_dir, "/sdi/IHME_GBD_2019_SDI_1990_2019_Y2020M10D15.xlsx")))
# re-name variable names
names_sdi <- as.character(sdi.dat[1])
names(sdi.dat) <- names_sdi
setnames(sdi.dat, old=c("Location"), new=c("location"))
# remove extra name row from the field
sdi.dat <- sdi.dat[-c(1),]
# read in codebook
sdi.codebook <- as.data.table(read_xlsx(path = paste0(codebook_directory, "/IHME_GBD_2019_GBD_LOCATION_HIERARCHY_Y2020M10D15.xlsx")))
# rename location name variable
setnames(sdi.codebook, old=c("Location Name"), new=c("location"))
# create merge label name in both codebook and data
strip_chars(sdi.dat)
strip_chars(sdi.codebook)
names(unwanted_array)
## vector dictionary of special characters to regular characters
unwanted_array = list('ã'='a', 'é'="e", "Í"="I", "í"="i")
names(unwanted_array)
source(paste0(code_dir, "functions/", "strip_chars.R"), encoding = "UTF-8")
rm(list=ls())
# Author: Francisco Rios
# Purpose: Set up R for prepping UW PHI Vaccination Data
# Date: Last modified July 12, 2021
# Manually set the working directory
###############################
# load required packages
###############################
library(data.table)
library(ggplot2)
library(readxl)
###############################
# important variables
###############################
shared_data_dir <- "G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/Data"
local_data_dir <- "G:/My Drive/PHI/local_data"
code_dir <- "./"
codebook_directory <- paste0(local_data_dir,"/codebooks")
###############################
# source shared functions
###############################
source(paste0(code_dir, "functions/", "prep_vax_trend_data.R"))
source(paste0(code_dir, "functions/", "strip_chars.R"), encoding = "UTF-8")
###############################
# set Boolean switches
##############################
# Author: Francisco Rios
# Purpose: Prep socio-demographic data for analyses
# Date: Last modified July 13, 2021
# read in SDI data downloaded from GBD
sdi.dat <- as.data.table(read_xlsx(path = paste0(local_data_dir, "/sdi/IHME_GBD_2019_SDI_1990_2019_Y2020M10D15.xlsx")))
# re-name variable names
names_sdi <- as.character(sdi.dat[1])
names(sdi.dat) <- names_sdi
setnames(sdi.dat, old=c("Location"), new=c("location"))
# remove extra name row from the field
sdi.dat <- sdi.dat[-c(1),]
# read in codebook
sdi.codebook <- as.data.table(read_xlsx(path = paste0(codebook_directory, "/IHME_GBD_2019_GBD_LOCATION_HIERARCHY_Y2020M10D15.xlsx")))
# rename location name variable
setnames(sdi.codebook, old=c("Location Name"), new=c("location"))
# create merge label name in both codebook and data
strip_chars(sdi.dat)
strip_chars(sdi.codebook)
View(sdi.dat)
sdi.dat <- strip_chars(sdi.dat)
sdi.codebook <- strip_chars(sdi.codebook)
# check to make sure that all locations in codebook are in the data
code_check <- paste0(sdi.codebook$location)
data_check <- paste0(sdi.dat$location)
unmapped_codes <- sdi.dat[!data_check%in%code_check]
if(nrow(unmapped_codes)>0){
print(unique(unmapped_codes[, c("Location"), with= FALSE]))
# print(unique(unmapped_codes$file_name)) #For documentation in the comments above.
stop("You have unmapped original codes!")
}
if(nrow(unmapped_codes)>0){
print(unique(unmapped_codes[, c("location"), with= FALSE]))
# print(unique(unmapped_codes$file_name)) #For documentation in the comments above.
stop("You have unmapped original codes!")
}
View(sdi.codebook)
