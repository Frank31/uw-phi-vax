<<<<<<< HEAD
# set shared team Google drive and code repo dynamically
if (Sys.info()[2]=='10 x64'){
g_drive  <- 'G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- 'C:/Users/frc2/Documents/uw-phi-vax/'
} else if (Sys.info()[2]=='Server x64'){
g_drive  <- 'G:/Shared with Me/Merck Vaccine Improvement Index Project/'
code_dir <- 'H:/uw-phi-vax/'
} else {
g_drive  <- '/Volumes/GoogleDrive/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- '~/Documents/uw-phi-vax/'
}
# Author: Francisco Rios
# Purpose: Set up R for prepping UW PHI Vaccination Data
# Date: Last modified September 20, 2021
# Load required packages -----
library(data.table)
library(ggplot2)
library(readxl)
library(tidyverse)
# Define important variables -----
# set shared team Google drive and code repo dynamically
if (Sys.info()[2]=='10 x64'){
g_drive  <- 'G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- 'C:/Users/frc2/Documents/uw-phi-vax/'
} else if (Sys.info()[2]=='Server x64'){
g_drive  <- 'G:/Shared with Me/Merck Vaccine Improvement Index Project/'
code_dir <- 'H:/uw-phi-vax/'
} else {
g_drive  <- '/Volumes/GoogleDrive/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- '~/Documents/uw-phi-vax/'
}
setwd(code_dir) # set the working directory to wherever code is stored
raw_data_dir <- paste0(g_drive,"Data/raw_data/") # location of raw data
prepped_data_dir <- paste0(g_drive,"Data/prepped_data/") # location of prepped data
codebook_directory <- paste0(g_drive,"Data/documentation/codebooks/") # location of codebooks for interpreting data
resDir <- paste0(g_drive, "Results/") # location of  any result outputs
visDir <- paste0(g_drive,"Visualizations/") # location where visualizations are saved
# set up for analyses
# might be necessary to do this first
# Load useful packages
library(mice)
library(VIM)
library(car)
library(psych)
library(moments)
# Make sure all variables have a complete time series -----
# Load prepped and merged data
dt <- read_rds(paste0(prepped_data_dir, "aim_2/12_merged_dataset.RDS"))
# subset data to specific time frame
dt <- dt %>% filter(year < 2020 & year > 1990)
# ensure all variables have a complete time series
imputed_Data <- mice(dt, m=5, maxit = 50, method = 'pmm', seed = 500)
# save imputed data set in prepped data folder
saveRDS(imputed_Data, file=paste0(prepped_data_dir, "aim_2/imputed_data_list.RDS"))
# get first completed dataset to observe trends
completeDT <- complete(imputed_Data, 1)
# save copy of untransformed first completed data set
untransformed <- copy(completeDT)
untransformed <- as.data.table(untransformed)
# First kind of transformation: log transformation -----
# create dt1 to save first transformation
dt1 <- as.data.table(completeDT)
names(dt1)
# Reshape untransformed data for plotting
plot_untr_dt <- melt(untransformed, id.vars = idVars, variable.name = 'variable')
# Reshape each transformed data for plotting
idVars <- unique(codeTable$Variable)[1:5]
# save imputed data set in prepped data folder
saveRDS(imputed_Data, file=paste0(prepped_data_dir, "aim_2/imputed_data_list.RDS"))
# get first completed dataset to observe trends
completeDT <- complete(imputed_Data, 1)
# save copy of untransformed first completed data set
untransformed <- copy(completeDT)
untransformed <- as.data.table(untransformed)
# Test transformation 1: natural log transformation -----
dt1 <- as.data.table(completeDT)
dt1[,c(6:19)] <- log(dt1[, c(6:19)])
# Test transformation 2: multiply by 1000 then log transformation -----
dt2 <- as.data.table(completeDT)
dt2[,c(6:19)] <- log(1000*dt2[, c(6:19)])
# Test transformation 3: sqrt transformation -----
dt3 <- as.data.table(completeDT)
dt3[,c(6:19)] <- sqrt(dt3[, c(6:19)])
# Test transformation 4: squared transformation -----
dt4 <- as.data.table(completeDT)
dt4[,c(6:19)] <- (dt3[,c(6:19)]^2)
# Fourth transformation: cumulative, log, logit and lag. ----
# pending
# Load "codeTable" for easy labeling
codeTable <- as.data.table(read_xlsx(path=paste0(codebook_directory, "vaccine_index_variable_codebook.xlsx")))
labelTable <- unique(codeTable[,.(Variable, Label)])
# Reshape each transformed data for plotting
idVars <- unique(codeTable$Variable)[1:5]
plotdt1 <- melt(dt1, id.vars = idVars, variable.name = 'variable')
plotdt2 <- melt(dt2, id.vars = idVars, variable.name = 'variable')
plotdt3 <- melt(dt3, id.vars = idVars, variable.name = 'variable')
plotdt4 <- melt(dt4, id.vars = idVars, variable.name = 'variable')
indexVars <- unique(df1$variable)
# Transformed data used to create index
histograms1 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt1[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
natural log.') +
theme_minimal()
})
histograms2 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt2[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
values multiplied by 1000, and natural log.') +
theme_minimal()
})
histograms3 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt3[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
square root.') +
theme_minimal()
})
histograms4 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt4[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
squared.') +
theme_minimal()
})
# Reshape untransformed data for plotting
plot_untr_dt <- melt(untransformed, id.vars = idVars, variable.name = 'variable')
# Untransformed data
histograms_untr = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plot_untr_dt[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histograms of untransformed', l), y = 'value', x =l,
caption='Variables are pre-transformation.')+
theme_minimal()
})
# Reshape each transformed data for plotting
idVars <- unique(codeTable$Variable)[1:5]
indexVars <- unique(plotdt1$variable)
indexVars
# Transformed data used to create index
histograms1 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt1[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
natural log.') +
theme_minimal()
})
histograms2 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt2[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
values multiplied by 1000, and natural log.') +
theme_minimal()
})
histograms3 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt3[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
square root.') +
theme_minimal()
})
histograms4 = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plotdt4[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histogram of', l), y = 'Value', x = l,
caption='Variables are post-transformation. Transformation:
squared.') +
theme_minimal()
})
# Reshape untransformed data for plotting
plot_untr_dt <- melt(untransformed, id.vars = idVars, variable.name = 'variable')
# Untransformed data
histograms_untr = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plot_untr_dt[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histograms of untransformed', l), y = 'value', x =l,
caption='Variables are pre-transformation.')+
theme_minimal()
})
# print(paste('Saving:', outputFile4c)C)
outputFile15 <- paste0(visDir, "aim_2/transformed_data_exploration.pdf")
pdf(outputFile15, height=5.5, width=9)
for(i in seq(length(histograms))) {
print(histograms_untr[[i]])
print(histograms1[[i]])
print(histograms2[[i]])
print(histograms3[[i]])
print(histograms4[[i]])
}
for(i in seq(length(histograms_untr))) {
print(histograms_untr[[i]])
print(histograms1[[i]])
print(histograms2[[i]])
print(histograms3[[i]])
print(histograms4[[i]])
}
dev.off()
unique(plot_untr_dt$variable)
for (id in unique(plot_untr_dt$variable)){
sub_Data <- plot_untr_dt[which(plot_untr_dt$variable == id), ]$value
pdf(paste0(visDir, "aim_2/qq_", id, ".pdf"))
qqnorm(sub_Data, main=paste("Variable =", id))
qqline(sub_Data, col="red", lty =2, lwd = 3)
dev.off()
}
qqplot_untr = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
sub_Data <- plot_untr_dt[which(plot_untr_dt$variable == v), ]$value
qqnorm(sub_Data, main=paste("Variable =", v))
qqline(sub_Data, col="red", lty = 2, lwd = 3)
})
qqplot_untr[1]
qqplot_untr[[1]]
histograms_untr = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(plot_untr_dt[variable==v], aes(value)) +
geom_histogram() +
labs(title = paste('Histograms of untransformed', l), y = 'value', x =l,
caption='Variables are pre-transformation.')+
theme_minimal()
})
qqplot_untr = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
sub_Data <- plot_untr_dt[which(plot_untr_dt$variable == v), ]$value
qqnorm(sub_Data, main=paste("Variable =", v))
qqline(sub_Data, col="red", lty = 2, lwd = 3)
})
View(qqplot_untr)
indexVars
plot_untr_dt[which(plot_untr_dt$variable==nch_cnv_dah_20)]
names(plot_untr_dt)
skewness(dt1$imm_pop_perc)
skewness(untransformed$imm_pop_perc)
=======
key = "15d97f95d425add6ca59bc6def0474d01f701af5")
colnames(medinc)[colnames(medinc)=="estimate"] <- "medinc"
colnames(medinc)[colnames(medinc)=="moe"] <- "moe_medinc"
medinc = medinc[,-c(2,3)]
asian <- merge(asian, medinc, by = "GEOID")
poverty <-
get_acs(geography = "place",
variables = "B17001D_002",
state = "MD",
year = years,
geometry = FALSE,
cache_table = TRUE,
key = "15d97f95d425add6ca59bc6def0474d01f701af5")
colnames(poverty)[colnames(poverty)=="estimate"] <- "poverty"
colnames(poverty)[colnames(poverty)=="moe"] <- "moe_poverty"
poverty = poverty[,-c(2,3)]
asian <- merge(asian, poverty, by = "GEOID")
pop <-
get_acs(geography = "place",
variables = "B17001D_001",
state = "MD",
year = years,
geometry = FALSE,
cache_table = TRUE,
key = "15d97f95d425add6ca59bc6def0474d01f701af5")
colnames(pop)[colnames(pop)=="estimate"] <- "pop"
colnames(pop)[colnames(pop)=="moe"] <- "moe_pop"
pop = pop[,-c(2,3)]
asian <- merge(asian, pop, by = "GEOID")
hh <-
get_acs(geography = "place",
variables = "B25003D_001",
state = "MD",
year = years,
geometry = FALSE,
cache_table = TRUE,
key = "15d97f95d425add6ca59bc6def0474d01f701af5")
colnames(hh)[colnames(hh)=="estimate"] <- "hh"
colnames(hh)[colnames(hh)=="moe"] <- "moe_hh"
hh = hh[,-c(2,3)]
asian <- merge(asian, hh, by = "GEOID")
asian$rent <- NA
asian$moe_rent <- NA
asian$allocation <- NA
asian$moe_allocation <- NA
asian$burden <- NA
asian$burden_rate <- NA
var <- rbind(total, white, black, latinx, asian)
var$ACSyear <- years
assign(paste0("ACS", years), var)
}
ACS <- rbind(ACS2010, ACS2011, ACS2012, ACS2013, ACS2014, ACS2015, ACS2016, ACS2017)
ACS$rent_pct <- 100*(ACS$renters/ACS$hh)
ACS$pov_rate <- 100*(ACS$poverty/ACS$pop)
for(row in 1:nrow(ACS)){ ## Adjusting for inflation
if(ACS$ACSyear[row] == 2010){
ACS$medinc[row] <- ACS$medinc[row]*1.12
} else if (ACS$ACSyear[row] == 2011){
ACS$medinc[row] <- ACS$medinc[row]*1.09
} else if (ACS$ACSyear[row] == 2012){
ACS$medinc[row] <- ACS$medinc[row]*1.06
} else if (ACS$ACSyear[row] == 2013){
ACS$medinc[row] <- ACS$medinc[row]*1.05
} else if (ACS$ACSyear[row] == 2014){
ACS$medinc[row] <- ACS$medinc[row]*1.03
} else if (ACS$ACSyear[row] == 2015){
ACS$medinc[row] <- ACS$medinc[row]*1.03
} else if (ACS$ACSyear[row] == 2016){
ACS$medinc[row] <- ACS$medinc[row]*1.02
} else {
ACS$medinc[row] <- ACS$medinc[row]*1
}
}
write.csv(ACS, "MD_MUNI_ACS.csv", row.names = FALSE)
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
> install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/Library/Frameworks/PROJ.framework/Headers', '--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'))
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/Library/Frameworks/PROJ.framework/Headers', '--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'))
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
install.packages("sf")
shiny::runApp('Desktop/shiny_test')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Load required packages -----
library(shiny)
library(shinythemes)
library(DT)
library(dplyr)
library(formattable)
library(tidyr)
library(leaflet)
library(plotly)
library(readxl)
library(rintrojs)
#setwd("~/Desktop/PHI - Research Assitant/Winter/vax/aim1")
vaccine_trends <- readRDS("01_vaccine_trends.RDS")
sdi <- readRDS("02_sdi.RDS")
raw_extracted_dhs <- readRDS("03_raw_extracted_dhs.RDS")
prepped_dhs_for_mov <- readRDS("04_prepped_dhs_for_mov.RDS")
disease_trends <- readRDS("05_disease_trends.RDS")
merged_data_for_visuals <- readRDS("06_merged_data_for_visuals.RDS")
vaccine_preventable_diseases <- read_excel("vaccine_preventable_diseases.xlsx")
#low_sdi_lctns <- merged_data_for_visuals[sdi_group_present=="low"][,c("location_name","sdi")]
#medium_sdi_lctns <- merged_data_for_visuals[sdi_group_present=="medium"][,c("location_name","sdi")]
#high_sdi_lctns <- merged_data_for_visuals[sdi_group_present=="high"][,c("location_name","sdi")]
############################################### ui.R ##################################################
body <-navbarPage(theme = shinytheme("flatly"), collapsible = TRUE,
title = "Global Vaccination Improvement Dashboard",
sidebarPanel(
h3(strong("Global SDI Ranking Table")),
selectInput("year", "Year:",choices=sort(unique(merged_data_for_visuals$year))),
radioButtons("sdi_group_present","SDI Group Present", choices = c("All"="all","Low" ="low","Medium" = "medium","High" = "high"),inline = TRUE),
tags$style(HTML('table.dataTable tr.selected td, table.dataTable td.selected {background-color: #92c9e8 !important;}')),
DT::dataTableOutput("table")),
mainPanel(
tabsetPanel(id = "t1",
tabPanel("Global SDI Mapper",value="t_sdi",
h3(strong("A World SDI Ranking Map will be updated here later"),style='font-family:Avenir, Helvetica;font-size:40;text-align:center'),
leaflet::leafletOutput("mymap", height = "80vh")),
tabPanel("Vaccination Trends", value = "t_vac",
h3(strong(htmlOutput("content_vac"))),
fluidRow(column(width = 12, "Select location by clicking location_name in left Global SDI Ranking table or click location on map.",
style='font-family:Avenir, Helvetica;font-size:30;text-align:left')),
plotlyOutput("all_vaccine_plot"),
fluidRow(
column(3,
h4("BCG"),
helpText("Bacillus Calmette–Guérin"),
DT::dataTableOutput("BCGtable")),
column(3,
h4("DTP1 & DTP3"),
helpText("Diphtheria, tetanus, pertussis"),
DT::dataTableOutput("DTPtable")),
column(2,
h4("HepB3"),
helpText("Hepatitis B"),
DT::dataTableOutput("HepB3table")),
column(2,
h4("MCV1 & MCV2"),
helpText("Measles"),
DT::dataTableOutput("MCVtable")),
column(2,
h4("RotaC"),
helpText("Rotavirus"),
DT::dataTableOutput("RotaCtable")),
)),
tabPanel("Disease Trends",value = "d_vac",
h3(strong(htmlOutput("content_dis"))),
fluidRow(column(width = 12, "Select location by clicking location_name in left Global SDI Ranking table or click location on map.",
style='font-family:Avenir, Helvetica;font-size:30;text-align:left')),
radioButtons("disease_estimate",NULL, choices = c("Number Value"="number_val","Percent Value" ="percent_val","Rate Value" = "rate_val"),inline = TRUE),
plotlyOutput("all_disease_plot"),
plotlyOutput("all_disability_plot"))
)
)
)
server <- function(input, output,session) {
year <- reactive({
req(input$year)
merged_data_for_visuals[merged_data_for_visuals$year == input$year,]
})
sdi_group_present <- reactive({
req(input$sdi_group_present)
if (input$sdi_group_present == "all"){
all_sdi_group <- year()
}
else{
filter(year(), sdi_group_present == input$sdi_group_present)
}
})
output$table = DT::renderDataTable({
sdi_rank_table<-sdi_group_present()[,c("location_name","sdi","sdi_group_present")]
sdi_rank_table$rank <- NA
sdi_rank_table$rank = dense_rank(desc(sdi_rank_table$sdi))
sdi_rank_table <- sdi_rank_table[,c("rank","location_name","sdi","sdi_group_present")]
print("sorting")
sdi_rank_table<-sdi_rank_table[order(sdi_rank_table$rank),]
print(sdi_rank_table)
true_false_formatter <-
formatter("span",
style = x ~ formattable::style(
font.weight = "bold",
color = ifelse(x == "high", "forestgreen", ifelse(x == "low", "red", "black"))
))
formattable(
sdi_rank_table,
list(
## a coloured bar with length proportional to value
'sdi' = color_tile("white", "pink"),
## use custom formatter for TRUE/FALSE values
sdi_group_present = true_false_formatter
)
) %>%
as.datatable(rownames = FALSE,
selection = list(mode = 'single',target="cell", selected = matrix(c(0, 1), nrow = 1,ncol = 2)),
options = list(paging = TRUE,
#scrollX=TRUE,
ordering = FALSE,
#dom = 'Bfrtip',
pageLength=12)
)
})
output$content_vac <- renderText("Switzerland")
output$content_dis <- renderText("Switzerland")
output$all_vaccine_plot <- renderPlotly({
vac_plotdata <- filter(vaccine_trends,gsub(" ", "", location_name) == gsub(" ", "", "Switzerland"))
fig_a <- plot_ly(vac_plotdata, x = ~year_id,y=~prop_val, color = ~vaccine_name)%>%
add_lines()
fig_a <- fig_a %>%
layout(title ="Time Series of Vaccination Coverage",  showlegend = T,
xaxis = list(title = "Year",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE),
yaxis = list(title = "Modeled estimate of vaccination coverage (%)",showgrid = FALSE, zeroline = TRUE, showticklabels = TRUE))
fig_a
})
output$all_disease_plot <- renderPlotly({
print("input")
print(input$disease_estimate)
disease_plotdata <- filter(disease_trends,gsub(" ", "", location_name) == gsub(" ", "", "Switzerland"))
if (input$disease_estimate == "number_val"){
fig_dis <- plot_ly(disease_plotdata, x = ~year_id,y= ~deaths_number_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Deaths, Disease or Disability Cause Number"
y_title = "Number of Deaths in Population"
}
else if (input$disease_estimate == "percent_val"){
fig_dis <- plot_ly(disease_plotdata, x = ~year_id,y= ~deaths_percent_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Deaths, Disease or Disability Cause Percent"
y_title="Proportion of deaths for a particular cuase relative to deaths from all causes"
}
else{
fig_dis <- plot_ly(disease_plotdata, x = ~year_id,y= ~deaths_rate_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Deaths, Disease or Disability Cause Rate"
y_title="Deaths per 100,000 population"
}
fig_dis <- fig_dis %>%
layout(title =title,  showlegend = T,
xaxis = list(title = "Year",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE),
yaxis = list(title =y_title,showgrid = FALSE, zeroline = TRUE, showticklabels = TRUE))
fig_dis
})
output$all_disability_plot <- renderPlotly({
disability_plotdata <- filter(disease_trends,gsub(" ", "", location_name) == gsub(" ", "", "Switzerland"))
if (input$disease_estimate == "number_val"){
fig_dis <- plot_ly(disability_plotdata, x = ~year_id,y= ~ylds_number_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Years Lived in Less Than Ideal health"
y_title = "Number of years lived with disability in the population "
}
else if (input$disease_estimate == "percent_val"){
fig_dis <- plot_ly(disability_plotdata, x = ~year_id,y= ~ylds_percent_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Proportion of Years Lived in Less Than Ideal health"
y_title="Proportion of YLDs for a particular cause relative to YLDs for all causes"
}
else{
fig_dis <- plot_ly(disability_plotdata, x = ~year_id,y= ~ylds_rate_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Years Lived in Less Than Ideal health per 100,000 population"
y_title="YLDs per 100,000 population"
}
fig_disa <- plot_ly(disability_plotdata, x = ~year_id,y=~ylds_number_val, color = ~cause_name)%>%
add_lines()
fig_disa <- fig_disa %>%
layout(title =title,  showlegend = T,
xaxis = list(title = "Year",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE),
yaxis = list(title = y_title,showgrid = FALSE, zeroline = TRUE, showticklabels = TRUE))
fig_disa
})
observeEvent(input$table_cell_clicked,{
info = input$table_cell_clicked
if (is.null(info$value) || info$col != 1) return()
updateTabsetPanel(session, 't1', selected = 'Vaccination Trends')
if(input$t1 == "t_sdi"){
updateTabsetPanel(session, 't1', selected = 'Vaccination Trends')
}
else if(input$t1 == "t_vac"){
updateTabsetPanel(session, 't1', selected = 'Disease Trends')
}
output$content_vac <- renderText(info$value)
output$content_dis <- renderText(info$value)
output$all_vaccine_plot <- renderPlotly({
vac_plotdata <- filter(vaccine_trends,gsub(" ", "", location_name) == gsub(" ", "", info$value))
fig_vac <- plot_ly(vac_plotdata, x = ~year_id,y=~prop_val, color = ~vaccine_name)%>%
add_lines()
fig_vac <- fig_vac %>%
layout(title ="Time Series of Vaccination Coverage",  showlegend = T,
xaxis = list(title = "Year",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE),
yaxis = list(title = "Modeled estimate of vaccination coverage (%)",showgrid = FALSE, zeroline = TRUE, showticklabels = TRUE))
fig_vac
})
output$all_disease_plot <- renderPlotly({
disease_plotdata <- filter(disease_trends,gsub(" ", "", location_name) == gsub(" ", "", info$value))
if (input$disease_estimate == "number_val"){
fig_dis <- plot_ly(disease_plotdata, x = ~year_id,y= ~deaths_number_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Deaths, Disease or Disability Cause Number"
y_title = "Number of Deaths in Population"
}
else if (input$disease_estimate == "percent_val"){
fig_dis <- plot_ly(disease_plotdata, x = ~year_id,y= ~deaths_percent_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Deaths, Disease or Disability Cause Percent"
y_title="Proportion of deaths for a particular cuase relative to deaths from all causes"
}
else{
fig_dis <- plot_ly(disease_plotdata, x = ~year_id,y= ~deaths_rate_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Deaths, Disease or Disability Cause Rate"
y_title="Deaths per 100,000 population"
}
fig_dis <- fig_dis %>%
layout(title =title,  showlegend = T,
xaxis = list(title = "Year",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE),
yaxis = list(title = y_title,showgrid = FALSE, zeroline = TRUE, showticklabels = TRUE))
fig_dis
})
output$all_disability_plot <- renderPlotly({
disability_plotdata <- filter(disease_trends,gsub(" ", "", location_name) == gsub(" ", "", info$value))
if (input$disease_estimate == "number_val"){
fig_dis <- plot_ly(disability_plotdata, x = ~year_id,y= ~ylds_number_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Years Lived in Less Than Ideal health"
y_title = "Number of years lived with disability in the population "
}
else if (input$disease_estimate == "percent_val"){
fig_dis <- plot_ly(disability_plotdata, x = ~year_id,y= ~ylds_percent_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Proportion of Years Lived in Less Than Ideal health"
y_title="Proportion of YLDs for a particular cause relative to YLDs for all causes"
}
else{
fig_dis <- plot_ly(disability_plotdata, x = ~year_id,y= ~ylds_rate_val, color = ~cause_name)%>%
add_lines()
title = "Time Series of Years Lived in Less Than Ideal health per 100,000 population"
y_title="YLDs per 100,000 population"
}
fig_disa <- plot_ly(disability_plotdata, x = ~year_id,y=~ylds_number_val, color = ~cause_name)%>%
add_lines()
fig_disa <- fig_disa %>%
layout(title =title,  showlegend = T,
xaxis = list(title = "Year",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE),
yaxis = list(title = y_title,showgrid = FALSE, zeroline = TRUE, showticklabels = TRUE))
fig_disa
})
#output$lineplot <- renderPlot({
#vac_data <- filter(year(),location_name == info$value)
#vac_data %>%
#ggplot(aes(x=reorder(Education, CompTotal), y=CompTotal)) +
#geom_boxplot()+
#coord_flip()+
#scale_y_log10()+
#labs(x="Education", y="Salary in US Dollars")
})
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron")
})
output$BCGtable = DT::renderDataTable({
bcg_table <- vaccine_preventable_diseases[vaccine_preventable_diseases$vaccine_name == "BCG",][,c("cause_name")]
formattable(
bcg_table
) %>%
as.datatable(rownames = FALSE,  colnames = NULL,
options = list(paging = FALSE,
dom = 't',
ordering = FALSE)
)
})
output$DTPtable = DT::renderDataTable({
table <- vaccine_preventable_diseases[vaccine_preventable_diseases$vaccine_name == "DTP1",][,c("cause_name")]
formattable(
table
) %>%
as.datatable(rownames = FALSE, colnames = NULL,
options = list(paging = FALSE,
dom = 't',
ordering = FALSE))
})
output$HepB3table = DT::renderDataTable({
table <- vaccine_preventable_diseases[vaccine_preventable_diseases$vaccine_name == "HepB3",][,c("cause_name")]
formattable(
table
) %>%
as.datatable(rownames = FALSE,  colnames = NULL,
options = list(paging = FALSE,
dom = 't',
ordering = FALSE))
})
output$MCVtable = DT::renderDataTable({
table <- unique(vaccine_preventable_diseases[vaccine_preventable_diseases$vaccine_name == "MCV1" | vaccine_preventable_diseases$vaccine_name == "MCV2",][,c("cause_name")])
formattable(
table
) %>%
as.datatable(rownames = FALSE,  colnames = NULL,
options = list(paging = FALSE,
dom = 't',
ordering = FALSE))
})
output$RotaCtable = DT::renderDataTable({
table <- vaccine_preventable_diseases[vaccine_preventable_diseases$vaccine_name == "RotaC",][,c("cause_name")]
formattable(
table
) %>%
as.datatable(rownames = FALSE,  colnames = NULL,
options = list(paging = FALSE,
dom = 't',
ordering = FALSE))
})
}
shinyApp(body, server)
shiny::runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
shiny::runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
shiny::runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
runApp('Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-')
vaccine_trends <- readRDS("aim_1/New/01_vaccine_trends.RDS")
sdi <- readRDS("aim_1/New/02_sdi.RDS")
raw_extracted_dhs <- readRDS("aim_1/New/03_raw_extracted_dhs.RDS")
#prepped_dhs_for_mov <- readRDS("aim_1/New/04_prepped_dhs_for_mov.RDS")
disease_trends <- readRDS("aim_1/New/05_disease_trends.RDS")
merged_data_for_visuals <- readRDS("aim_1/New/06_merged_data_for_visuals.RDS")
vaccine_preventable_diseases <- read_excel("aim_1/vaccine_preventable_diseases.xlsx")
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Load required packages -----
library(shiny)
library(shinythemes)
library(DT)
library(dplyr)
library(formattable)
library(tidyr)
library(leaflet)
library(plotly)
library(readxl)
library(shinycssloaders)
library(shinyWidgets)
library(shinyhelper)
#setwd("~/Desktop/PHI - Research Assitant/Winter/vax/aim1")
vaccine_trends <- readRDS("aim_1/New/01_vaccine_trends.RDS")
sdi <- readRDS("aim_1/New/02_sdi.RDS")
raw_extracted_dhs <- readRDS("aim_1/New/03_raw_extracted_dhs.RDS")
#prepped_dhs_for_mov <- readRDS("aim_1/New/04_prepped_dhs_for_mov.RDS")
disease_trends <- readRDS("aim_1/New/05_disease_trends.RDS")
merged_data_for_visuals <- readRDS("aim_1/New/06_merged_data_for_visuals.RDS")
vaccine_preventable_diseases <- read_excel("aim_1/vaccine_preventable_diseases.xlsx")
#available disase data for cause name
merged_data_for_vac_dis <- dplyr::left_join(vaccine_preventable_diseases,disease_trends, "cause_name", "cause_name")
# availavle vaccin data with description and cause name
preventable_vac_trend <- vaccine_trends
setwd("~/Desktop/PHI - Research Assitant/Winter/UW-PHI-Merck-Global-Vaccination-Dashboard-")
# Load required packages -----
library(shiny)
library(shinythemes)
library(DT)
library(dplyr)
library(formattable)
library(tidyr)
library(leaflet)
library(plotly)
library(readxl)
library(shinycssloaders)
library(shinyWidgets)
library(shinyhelper)
#setwd("~/Desktop/PHI - Research Assitant/Winter/vax/aim1")
vaccine_trends <- readRDS("aim_1/New/01_vaccine_trends.RDS")
sdi <- readRDS("aim_1/New/02_sdi.RDS")
raw_extracted_dhs <- readRDS("aim_1/New/03_raw_extracted_dhs.RDS")
#prepped_dhs_for_mov <- readRDS("aim_1/New/04_prepped_dhs_for_mov.RDS")
disease_trends <- readRDS("aim_1/New/05_disease_trends.RDS")
merged_data_for_visuals <- readRDS("aim_1/New/06_merged_data_for_visuals.RDS")
vaccine_preventable_diseases <- read_excel("aim_1/vaccine_preventable_diseases.xlsx")
View(sdi)
View(vaccine_preventable_diseases)
View(vaccine_trends)
runApp()
runApp()
runApp()
View(vaccine_trends)
runApp()
>>>>>>> f69c799a4807616ef2ea1a38653a66a91d6d70c2
