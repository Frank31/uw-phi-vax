# Author: Francisco Rios
# Purpose: Set up R for prepping UW PHI Vaccination Data
# Date: Last modified September 20, 2021
# Load required packages -----
library(data.table)
library(ggplot2)
library(readxl)
library(tidyverse)
# Define important variables -----
# set shared team Google drive and code repo dynamically
if (Sys.info()[2]=='10 x64'){
g_drive  <- 'G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- 'C:/Users/frc2/Documents/uw-phi-vax/'
} else if (Sys.info()[2]=='Server x64'){
g_drive  <- 'G:/Shared with Me/Merck Vaccine Improvement Index Project/'
code_dir <- 'H:/uw-phi-vax/'
} else {
g_drive  <- '/Volumes/GoogleDrive/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- '~/Documents/uw-phi-vax/'
}
setwd(code_dir) # set the working directory to wherever code is stored
raw_data_dir <- paste0(g_drive,"Data/raw_data/") # location of raw data
prepped_data_dir <- paste0(g_drive,"Data/prepped_data/") # location of prepped data
codebook_directory <- paste0(g_drive,"Data/documentation/codebooks/") # location of codebooks for interpreting data
resDir <- paste0(g_drive, "Results/") # location of  any result outputs
visDir <- paste0(g_drive,"Visualizations/") # location where visualizations are saved
# Load prepped and merged data
dt <- read_rds(paste0(prepped_data_dir, "aim_2/12_merged_dataset.RDS"))
# subset data to specific time frame
dt1 <- dt %>% filter(year < 2020 & year > 1990)
# impute missing values
library(mice)
library(VIM)
library(car)
# ensure all variables have a complete time series
imputed_Data <- mice(dt1, m=5, maxit = 50, method = 'pmm', seed = 500)
# get first completed dataset to observe trends
dt2 <- complete(imputed_Data, 1)
# save copy of untransformed data
untransformed <- copy(dt2)
View(dt2)
hist(dt2$nch_cnv_dah_20)
# inverse variables
# increases in this value are actually suggest worse index
invVars <- c('nch_cnv_dah_20')
# transform inverse variables to reciprocal
inverseTransform = function(x) {
1/x
}
inverseTransform(5000)
inverseTransform(50000000)
# inverse variables
# increases in this value are actually suggest worse index
invVars <- c('nch_cnv_dah_20')
for (v in invVars) {
dt2[, (v):=inverseTransform(get(v))]
}
dt2 <- as.data.table(dt2)
for (v in invVars) {
dt2[, (v):=inverseTransform(get(v))]
}
View(dt2)
hist(dt2$nch_cnv_dah_20)
ln(inf)
log(inf)
1/10000000
View(untransformed)
hist(haqi)
hist(dt2$haqi)
log(1)
log(20)
log(80)
numVars <- c('haqi')
logTransform = function(x) {
log(x)
}
for (v in numVars) {
dt1[, (v):=logTransform(get(v))]
}
for (v in numVars) {
dt2[, (v):=logTransform(get(v))]
}
hist(dt2$haqi)
log(20000)
# get first completed dataset to observe trends
completeDT <- complete(imputed_Data, 1)
dt2 <- as.data.table(completeDT)
for (v in numVars) {
dt2[get(v), (v):=v*1000]
dt2[, (v):=logTransform(get(v))]
}
for (v in numVars) {
dt2[get(v), (v):=1000*v]
dt2[, (v):=logTransform(get(v))]
}
dt2[get('haqi')]
dt2[get('haqi')]
dt2[col(7)]
dt2[, 7]
100*dt2[, 7]
1000*dt2[, 7]
log(1000*dt2[, c(7, 8)])
log(1000*dt2[, c(7)])
dt2[,c(7)] <- log(1000*dt2[, c(7)])
View(dt2)
hist(dt2$haqi)
hist(dt2$cpi)
hist(untra$haqi)
hist(untransformed$haqi)
hist(untransformed$haqi**(1/2))
hist(sqrt(untransformed$haqi))
hist(sqrt(untransformed$haqi))
untransformed$cpi
hist(untransformed$cpi)
hist(log(untransformed$cpi))
hist(untransformed$cpi)
hist(sqrt(untransformed$cpi))
hist(untransformed$cpi)
hist(sqrt(untransformed$cpi))
hist(log(untransformed$cpi))
hist(sqrt(untransformed$cpi))
hist(untransformed$cpi)
hist(untransformed$cpi^2)
hist(untransformed$haqi^2)
hist(1/unstransformed$haqi)
hist(1/untransformed$haqi)
hist(sqrt(1/untransformed$haqi))
hist(log(1/untransformed$haqi))
hist(sqrt(1/untransformed$haqi))
hist((1/untransformed$haqi)^2)
hist(sqrt(1/untransformed$haqi))
View(dt2)
names(dt2)
rm(list=ls())
# Author: Francisco Rios
# Purpose: Set up R for prepping UW PHI Vaccination Data
# Date: Last modified September 20, 2021
# Load required packages -----
library(data.table)
library(ggplot2)
library(readxl)
library(tidyverse)
# Define important variables -----
# set shared team Google drive and code repo dynamically
if (Sys.info()[2]=='10 x64'){
g_drive  <- 'G:/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- 'C:/Users/frc2/Documents/uw-phi-vax/'
} else if (Sys.info()[2]=='Server x64'){
g_drive  <- 'G:/Shared with Me/Merck Vaccine Improvement Index Project/'
code_dir <- 'H:/uw-phi-vax/'
} else {
g_drive  <- '/Volumes/GoogleDrive/.shortcut-targets-by-id/1P7ITMVB9x01fuYfHW8-uWogw4SpbuvwO/Merck Vaccine Improvement Index Project/'
code_dir <- '~/Documents/uw-phi-vax/'
}
setwd(code_dir) # set the working directory to wherever code is stored
raw_data_dir <- paste0(g_drive,"Data/raw_data/") # location of raw data
prepped_data_dir <- paste0(g_drive,"Data/prepped_data/") # location of prepped data
codebook_directory <- paste0(g_drive,"Data/documentation/codebooks/") # location of codebooks for interpreting data
resDir <- paste0(g_drive, "Results/") # location of  any result outputs
visDir <- paste0(g_drive,"Visualizations/") # location where visualizations are saved
# set up for analyses
# might be necessary to do this first
# Load useful packages
library(mice)
library(VIM)
library(car)
# Load prepped and merged data
dt <- read_rds(paste0(prepped_data_dir, "aim_2/12_merged_dataset.RDS"))
# subset data to specific time frame
dt <- dt %>% filter(year < 2020 & year > 1990)
# investigate missingness
# mice_plot <- aggr(dt1, col=c('navyblue', 'yellow'),
#                   numbers=TRUE, sortVars=TRUE)
# ensure all variables have a complete time series
imputed_Data <- mice(dt1, m=5, maxit = 50, method = 'pmm', seed = 500)
# get first completed dataset to observe trends
completeDT <- complete(imputed_Data, 1)
# save copy of untransformed data
untransformed <- copy(completeDT)
dt2 <- as.data.table(completeDT)
# Variables requiring inverse transformation
dt2[,c(8, 10, 11, 18)] <- 1/dt2[, c(8, 10, 11, 18)]
# Variables that require log transformation to achieve normality
dt2[,c(7:19)] <- log(1000*dt2[, c(7:19)])
# Load prepped and merged data
dt <- read_rds(paste0(prepped_data_dir, "aim_2/12_merged_dataset.RDS"))
# subset data to specific time frame
dt <- dt %>% filter(year < 2020 & year > 1990)
# ensure all variables have a complete time series
imputed_Data <- mice(dt1, m=5, maxit = 50, method = 'pmm', seed = 500)
# ensure all variables have a complete time series
imputed_Data <- mice(dt, m=5, maxit = 50, method = 'pmm', seed = 500)
# get first completed dataset to observe trends
completeDT <- complete(imputed_Data, 1)
# save copy of untransformed data
untransformed <- copy(completeDT)
dt2 <- as.data.table(completeDT)
# Variables requiring inverse transformation
dt2[,c(8, 10, 11, 18)] <- 1/dt2[, c(8, 10, 11, 18)]
# Variables that require log transformation to achieve normality
dt2[,c(7:19)] <- log(1000*dt2[, c(7:19)])
View(dt2)
untransformed$mig_rate
View(untransformed$mig_rate)
View(untransformed)
# Load "codeTable" for easy labeling
codeTable <- as.data.table(read_xlsx(path=paste0(codebook_directory, "vaccine_index_variable_codebook.xlsx")))
labelTable <- unique(codeTable[,.(Variable, Label)])
# Make histogram of all the variables
idVars <- unique(codeTable$Variable)[1:5]
df2 <- melt(dt2, id.vars = idVars, variable.name = 'variable')
histograms = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(df2[variable==v], aes(value)) +
geom_histogram() +
# facet_wrap(~vaccine_name) +
labs(title = paste('Histograms of', l), y = 'Value', x = l) +
theme_minimal()
})
indexVars <- unique(df$variable)
histograms = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(df2[variable==v], aes(value)) +
geom_histogram() +
# facet_wrap(~vaccine_name) +
labs(title = paste('Histograms of', l), y = 'Value', x = l) +
theme_minimal()
})
indexVars <- unique(df2$variable)
histograms = lapply(indexVars, function(v) {
l = labelTable[Variable==v]$Label
ggplot(df2[variable==v], aes(value)) +
geom_histogram() +
# facet_wrap(~vaccine_name) +
labs(title = paste('Histograms of', l), y = 'Value', x = l) +
theme_minimal()
})
# print(paste('Saving:', outputFile4c)C)
outputFile15 <- paste0(visDir, "aim_2/transformed_data_exploration.pdf")
pdf(outputFile15, height=5.5, width=9)
for(i in seq(length(histograms))) {
print(histograms[[i]])
# print(histograms_untr[[i]])
}
dev.off()
View(df2)
indexVars
names(dt2)
# Use DT2 to drop columsn we don't need:
dt2[,-c(6,11)]
# Use DT2 to drop columsn we don't need:
dt2 <- dt2[,-c(6,11)]
View(dt2)
dt2$geo_mean <- geometric.mean(dt2[,c(6:17)])
library(psych)
install.packages("psych", dependencies = FALSE)
library(psych)
install.packages(c("mnormt", "lattice", "nlme"), dependencies = FALSE)
library(psych)
install.packages("tmvnsim", dependencies = FALSE)
library(psych)
dt2$geo_mean <- geometric.mean(dt2[,c(6:17)])
dt2$Result <- apply(dt2, 1, function(x) (prod(x[x!=0]))^(1/sum(x!=0)))
View(dt2)
replace(x, x==0, 1))))^(1/v1), 2), .SDcols = 6:18][, v1 := NULL][]
replace(x, x==0, 1))))^(1/v1), 2), .SDcols = 6:18][, v1 := NULL][]
dt2[, v1 := Reduce(`+`, lapply(.SD, function(x) x!=0)), .SDcols = 6:18]
str(dt2)
# Calcualte geometric mean
dt2$result <- c(dt2$haqi, dt2$cpi)
View(dt2)
dt2$result <- c(dt2$haqi, dt2$cpi)
# Calcualte geometric mean
dt2$result <- dt2[, 6:7]
# Use DT2 to drop columsn we don't need:
dt2 <- unlist(dt2[,-c(6,11)])
View(dt)
dt2 <- as.data.table(completeDT)
data <- matrix(1:100, nrow = 10)
data
apply(data, 1, prod)
data$result <- apply(data, 1, prod)
data
